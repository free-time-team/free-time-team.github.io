\input texinfo

@documentlanguage en
@documentencoding UTF-8

@settitle Linux Editor

@copying
This manual is for editor, version 1.0.

Copyright @copyright{} years free time team.

@quotation
Permission is granted to
@end quotation
@end copying

@titlepage
@title name-of-manual-when-printed en
@subtitle subtitle-if-any
@subtitle second-subtitle
@author author

@c  The following two commands
@c  start the copyright page.
@page
@vskip 0pt plus 1filll
@insertcopying

Published by 
@end titlepage

@c So the toc is printed at the start.
@contents

@ifnottex
@node Top
@top Linux Editor

This manual is for program, version version.
@end ifnottex

@menu
* sed::
* vim::
* LaTex::
* texinfo::
* markdown::
@c * copying:: free time team
@end menu

@node sed
@chapter sed

@menu
* learning materials for sed::
* often used command for sed::
@c * copying:: free time team
@end menu

@node learning materials for sed
@section learning materials for sed

@itemize @bullet
@item
Sed introduction @url{http://www.grymoire.com/unix/sed.html, view}
@end itemize

@itemize @bullet
@item
Sed study[Chinese] @url{http://www.cnblogs.com/wangkangluo1/category/314369.html, view}
@end itemize

@node often used command for sed
@section often used command for sed

print
@example
sed -n '1,3p' temp.txt  // print line1 to line3
@end example

extract log
@example
Extract the lines which include the string from "2012-02-09" to "2012-09-10"
sed -n '/^2012-02-09/,/^2012-09-10/p' whole.log > part.log
@url{http://www.grymoire.com/unix/Sed.html#uh-29, reference}
@end example

add string to line tail
@example
sed 's/$/tail/' test1.txt
@url{http://blog.csdn.net/qianlong4526888/article/details/8669935, reference}
@end example

@node vim
@chapter vim

@menu
* learning materials for vim::
* vim start::
* vim basic command::
* vim ide::
* vim more plugin::
* multi-window::
* vimgrep::
* vim folding::
* vimdiff::
* often used command for vim::
@c * copying:: free  time team
@end menu

@node learning materials for vim
@section learning materials for vim

@example
@url{http://www.vim.org/, vim's home}
@url{https://wiki.archlinux.org/index.php/Vim, vim document form archlinux wiki}
@url{http://liuzhijun.iteye.com/category/270228, vim everyday}
@url{http://yannesposito.com/Scratch/en/blog/Learn-Vim-Progressively/, learn vim progressively}
@url{http://easwy.com/blog/archives/advanced-vim-skills-catalog/, advanced vim skills}
@url{http://www.oualline.com/vim/10/top_10.html, top 10 things vi user need to know about vim}
@url{http://coolshell.cn/articles/11312.html, no plugin skills}
@end example

@node vim start
@section vim sart

@b{Install vim for ubuntu}
@example
sudo apt-get install vim
@end example

@b{Vim tutorial}
@example
Open ubuntu shell
zzy@@zzy:~$ vimtutor
===============================================================================
=    W e l c o m e   t o   t h e   V I M   T u t o r    -    Version 1.7      =
===============================================================================

     Vim is a very powerful editor that has many commands, too many to
     explain in a tutor such as this.  This tutor is designed to describe
     enough of the commands that you will be able to easily use Vim as
     an all-purpose editor.
...
@end example

@b{Linux change keymap}
@example
setxkbmap -option ctrl:swapcaps  // swap ctrl and caps lock
@end example

@b{Modes}
@example
We have three vim modes:
Command mode: all keystrokes are interpreted as commands
Insert mode: most keystrokes are inserted as text (leaving out those with modifier keys)
Visual mode: helps to visually select some text, may be seen as a submode of the the command mode.
@end example

@b{Switch between vim modes}
@example
To switch from the insert or visual mode to the command mode, type <Esc>.

To switch from the command mode to the insert mode type one of
@b{i} -> switch to insert mode before the current position
@b{a} -> switch to insert mode after the current position (append)
@b{I} -> jump to the first non-blank character in the current line and switch to the insert mode
@b{A} -> jump to the last character of the current line and switch to the insert mode

To switch from the command mode to the visual mode type one of
@b{v} -> switch to the visual mode (character oriented)
@b{V} ->switch to the visual mode (line oriented)
@b{Ctrl-v} -> switch to the block-visual mode (select rectangles of text)
All commands that take a range (for example subtitution, delete, copy or indentation) work with the visual mode too.

Reference: http://blog.interlinked.org/tutorials/vim_tutorial.html
@end example

@image{./00resource/vim_mode, .jpg}

@b{Vim commands overview}

@image{./00resource/vim_cn, .jpg}

@node vim basic command
@section vim basic command

@b{move}
@example
0   "移动到行首
$   "移动行尾
^     "移动到行首的第一个非空白字符

w   "向前移动一个单词
b    "向后移动一个单词

ctrl+i   " 往前跳
ctrl+o  " 返回
ctrl+]   " 进入函数

Ctrl-f    即 PageDown 翻页。
Crtl-b    即 PageUp 翻页。

zt scrolls to the top
zz scrolls to the middle
zb scrolls to the bottom
@end example

@b{jump commands}
@example
%   配对寻找 @{@}、[]、()、#if #else #endif
@{     跳到上一段的开头
@}     跳到下一段的的开头.
(     移到这个句子的开头
)     移到下一个句子的开头
[[    跳往上一个函数
]]    跳往下一个函数
@end example

@b{hlsearch}
@example
:set hlsearch 高亮所有匹配字符串
:nohlsearch 临时关闭，他的缩写形式是：:noh
:set nohlsearch 彻底关闭，只有重新:set hlsearch才可以高亮搜索
* 向后搜索光标所在位置的单词
# 向前搜索光标所在位置的单词
n和N可以继续向后或向前搜索匹配的字符串
:nnormap <silent> <Space> :nohlsearch<Bar>:echo<CR>按空格关闭高亮，清空所有已经显示的
如果你想在高亮与不高亮之间快速切换，可以做一个映射 ： :noremap <F4> :set hlsearch! hlsearch?<CR>
按回车，临时返回高亮搜索
:nnoremap <CR> :nohlsearch<CR><CR>
@end example

@b{cut}
@example
dd          剪切当前行
ndd        n表示大于1的数字，剪切n行
:1,10d    从第一行剪切到第10行
dw         从光标处剪切至一个单子/单词的末尾，包括空格
de          从光标处剪切至一个单子/单词的末尾，不包括空格
d$          从当前光标剪切到行末
d0          从当前光标位置（不包括光标位置）剪切之行首
d3l         从光标位置（包括光标位置）向右剪切3个字符
d5G       将当前行（包括当前行）至第5行（不包括它）剪切
d3B       从当前光标位置（不包括光标位置）反向剪切3个单词
dH         剪切从当前行至所显示屏幕顶行的全部行
dM        剪切从当前行至命令M所指定行的全部行
dL         剪切从当前行至所显示屏幕底的全部行
"_d        剪切到另一个寄存器
@end example

@b{copy}
@example
yy：复制当前行
nyy：n表示大于1的数字，复制n行
yw：从光标处复制至一个单子/单词的末尾，包括空格
ye：从光标处复制至一个单子/单词的末尾，不包括空格
y$：从当前光标复制到行末
y0：从当前光标位置（不包括光标位置）复制之行首
y3l：从光标位置（包括光标位置）向右复制3个字符
y5G：将当前行（包括当前行）至第5行（不包括它）复制
y3B：从当前光标位置（不包括光标位置）反向复制3个单词
@end example

@b{paste}
@example
p：在当前光标处下面粘贴内容。
P：在当前光标处上面粘贴内容。
@end example

@b{Insert 模式下执行命令}
@example
可以在 Insert 模式下执行任何一个 Normal 模式下的命令： Ctrl-o（键入Ctrl + 英文字母O 后输入要执行的命令）
@end example

@b{indent}
@example
gg=G
http://stackoverflow.com/questions/506075/how-do-i-fix-the-indentation-of-an-entire-file-in-vi
http://vim.wikia.com/wiki/Indenting_source_code
@end example

@b{case insensitive search}
@example
:set ic   // case insensitive search
:set noic // to go back to case-sensitive searches use
// ic is shorthand for ignorecase
or /\c <word>   // case insensitive search
@end example

@b{copy to clipboard}
@example
1. shift+v 选择要复制的内容， 或者ctrl+v选择要复制的内容
    command: "+y
@end example

@b{vim binary}
@example
// open for read
vim <(xxd test)
@end example

@b{open for read/write}
@example
:set binary
:%!xxd
:%!xxd -r
@end example

@b{Go to definition using g}
@example
gd will take you to the local declaration.
gD will take you to the global declaration.
g* search for the word under the cursor (like *, but g* on 'rain' will find words like 'rainbow').
g# same as g* but in backward direction.
gg goes to the first line in the buffer (or provide a count before the command for a specific line).
G goes to the last line (or provide a count before the command for a specific line).
@end example

@b{vimdiff}
@example
vimdiff file1 file2
vimdiff <(xxd file1) <(xxd file2)
http://usevim.com/2012/06/20/vim-binary-files/
http://www.cnblogs.com/killkill/archive/2010/06/23/1763785.html
http://xineohpanihc.iteye.com/blog/1148741
http://blog.sina.com.cn/s/blog_4ddef8f80102v13k.html
@end example

@b{file explorer}
@example
:e .	Open integrated file explorer
:Sex	Split window and open integrated file explorer
:Sex!	Same as :Sex but split window vertically
http://www.oschina.net/news/43167/130-essential-vim-commands
@end example

@b{tab command}
@example
:tab split filename -> use tab to display buffers
gt ->   go to next tab
gT ->  go to previous tab
0gt ->  switch to 1st tab
5gt ->  switch to 5th tab
@end example

@b{using an external program}
@example
:! -> call any external program
:!make -> run make on current path
@end example

@b{switching case of characters}
@example
You can change the case of text:
Toggle case "HellO" to "hELLo" with g~ then a movement.
Uppercase "HellO" to "HELLO" with gU then a movement.
Lowercase "HellO" to "hello" with gu then a movement.
Alternatively, you can visually select text then press ~ to toggle case, or U to convert to uppercase, or u to convert to lowercase.
@end example

@b{ExamplesEdit}
@example
~
Toggle case of the character under the cursor, or all visually-selected characters.
3~
Toggle case of the next three characters.
g~3w
Toggle case of the next three words.
g~iw
Toggle case of the current word (inner word – cursor anywhere in word).
g~$
Toggle case of all characters to end of line.
g~~
Toggle case of the current line (same as V~).
The above uses ~ to toggle case. In each example, you can replace ~ with u to convert to lowercase, or with U to convert to uppercase. For example:
U
Uppercase the visually-selected text.
First press v or V then move to select text.
If you don't select text, pressing U will undo all changes to the current line.
gUU
Change the current line to uppercase (same as VU).
gUiw
Change current word to uppercase.
u
Lowercase the visually-selected text.
If you don't select text, pressing u will undo the last change.
guu
Change the current line to lowercase (same as Vu).
http://vim.wikia.com/wiki/Switching_case_of_characters
@end example

@b{reference}
@example
http://www.cnblogs.com/wangkangluo1/archive/2012/04/12/2444952.html  // vim commands
https://www.ibm.com/developerworks/cn/linux/l-cn-tip-vim/   // 高效vim
http://liuzhijun.iteye.com/blog/1826508
@end example

@node vim ide
@section vim ide

@b{start}
@example
create file： ~/.vimrc
create directory： ~/.vim ~/.vim/doc  ~/.vim/plugin ~/.vim/syntax
@end example

@b{basic set}
@example
set number          " set line number
set hlsearch        " set highlight search
syntax on             " syntax hightlight
@end example

@b{help}
@example
:help keycodes
@end example

@b{file explorer}
@example
:e .
@end example

@b{ctags}
@example
sudo apt-get install ctags
goto source code's top directory, run: ctags -R
@end example

@b{taglist}
@example
download: http://www.vim.org/scripts/script.php?script_id=273
unpack taglist_xx.zip in  ~/.vim directory
manual: help taglist.txt

add the following code to ~/.vimrc file
let Tlist_Show_One_File=1     "不同时显示多个文件的tag，只显示当前文件的  
let Tlist_Exit_OnlyWindow=1   "如果taglist窗口是最后一个窗口，则退出vim

command in vim environment
:Tlist
@end example

@b{cscope}
@example
sudo apt-get install cscope
cscope -Rbkq

// add
cscope add cscope.out

// find
0或者s   —— 查找这个C符号
1或者g  —— 查找这个定义
2或者d  —— 查找被这个函数调用的函数（们）
3或者c  —— 查找调用这个函数的函数（们）
4或者t   —— 查找这个字符串
6或者e  —— 查找这个egrep匹配模式
7或者f   —— 查找这个文件
8或者i   —— 查找#include这个文件的文件（们）

// help
使用方法：
:cs help

// example
cscope find g print
cscope find f cstest.h

// help
cscope commands:
add  : Add a new database             (Usage: add file|dir [pre-path] [flags])
find : Query for a pattern            (Usage: find c|d|e|f|g|i|s|t name)
       c: Find functions calling this function
       d: Find functions called by this function
       e: Find this egrep pattern
       f: Find this file
       g: Find this definition
       i: Find files #including this file
       s: Find this C symbol
       t: Find this text string
help : Show this message              (Usage: help)
kill : Kill a connection              (Usage: kill #)
reset: Reinit all connections         (Usage: reset)
show : Show connections               (Usage: show)

http://blog.chinaunix.net/uid-12461657-id-3051440.html
http://www.cnblogs.com/sunblackshine/archive/2011/08/25/2152962.html
http://easwy.com/blog/archives/advanced-vim-skills-cscope/
http://vim.wikia.com/wiki/Cscope
@end example

@b{NERDTree}
@example
http://www.vim.org/scripts/script.php?script_id=1658
let NERDTreeDirArrows=0

:NERDTree
@end example

@b{winmanager}
@example
unzip -n /home/zzy/winmanager.zip -d ~/.vim
在.vimrc文件中添加
let g:winManagerWindowLayout='FileExplorer|TagList'
@end example

@b{mark}
@example
download
http://www.vim.org/scripts/script.php?script_id=1238

install
copy mark.vim to ~/.vim/plugin 

usage
\m      mark or unmark the word under (or before) the cursor
\n      clear this mark (i.e. the mark under the cursor), or clear all highlighted marks .
\r      manually input a regular expression. 用于搜索.
\*      把光标向前切换到当前被Mark的MarkWords中的下一个MarkWord.
\#      把光标向后切换到当前被Mark的MarkWords中的上一个MarkWord.
\/      把光标向前切换到所有被Mark的MarkWords中的下一个MarkWord.
\?      把光标向后切换到所有被Mark的MarkWords中的上一个MarkWord.

Highlighting: 
  Normal mode: 
    \m mark or unmark the word under (or before) the cursor 
          Place the cursor under the word to be highlighted, press \m, then the word will be colored. 
    \r manually input a regular expression 
          To highlight an arbitrary regular expression, press \r and input the regexp. 
    \n clear this mark (i.e. the mark under the cursor), or clear all highlighted marks 
  Visual mode: 
    \m mark or unmark a visual selection 
          Select some text in Visual mode, press \m, then the selection will be colored. 
    \r manually input a regular expression (base on the selection text) 
  Command line: 
    :Mark regexp   to mark a regular expression 
    :Mark regexp   with exactly the same regexp to unmark it 
    :Mark          to clear all marks 

说明: 这些命令中的 '/' 是 vim 中的 mapleader, 你也可以设置为别的: 如,
若要设置为 ',', 把下面这条语句加到.vimrc文件中, 即可,
let mapleader=","
@end example

@b{vim color scheme}
@example
git clone https://github.com/fugalh/desert.vim.git
mkdir ~/.vim/colors
cp desert.vim/colors/desert.vim ~/.vim/colors/
colorscheme desert -> add to ~/.vimrc
https://www.linux.com/learn/weekend-project-take-control-vims-color-scheme
@end example

@b{reference}
@example
https://github.com/yangyangwithgnu/use_vim_as_ide
http://blog.csdn.net/wooin/article/details/1858917  // vim搭建IDE设置参考
http://blog.csdn.net/wooin/article/details/2004470  // vim IDE续
http://blog.csdn.net/wooin/article/details/1887737  // vimrc配置范例
http://www.vim.org/scripts/script.php?script_id=1658  // NERD tree 文件系统导航
http://www.vim.org/scripts/script.php?script_id=273  // taglist 方便查看源文件结构
http://www.vim.org/scripts/script.php?script_id=1581 // lookupfile 文件查找插件
http://noworry.blog.51cto.com/6223479/1114812  // vim IDE 搭建
http://blog.csdn.net/daniel_ustc/article/details/8299096 // vim + ctags + taglist配置和使用，一键安装 ctags和cscope的方法，vim语法高亮,自动缩进，python 自动缩进设置
@end example

@node vim more plugin
@section vim more plugin

@b{mru}
@example
http://www.vim.org/scripts/script.php?script_id=521
1. Copy the mru.vim file to one of the following directories:  ~/.vim/plugin
2. Restart Vim. 
3. You can use the mru
:MRU
@end example

@b{tagbar}
@example
<F1>          显示键映射帮助。
<CR>/<Enter>  跳转到当前光标下的 tag。如果是伪标签或一般的头信息则没作用.
p             源文件跳转到当前光标下的 tag。但光标停留在 Tagbar 窗口。
<LeftMouse>   如果点击折叠图标，按折叠的当前状态开打开或关闭折叠。
<2-LeftMouse> 同 <CR>。如果希望使用单击替代双击，参考 |g:tagbar_singleclick|。
<Space>       在命令行显示当前 tag 的原型信息。(比如行号)
+/zo          打开当前光标下的折叠。
-/zc          如果光标下有折叠则关闭光标下的折叠，如果没有则关闭当前的折叠。
o/za          切换光标下的折叠状态，如果光标下没有折叠，切换当前的折叠状态。
*/zR          通过设置折叠级别(foldlevel)为 99 来打开所有的折叠。
=/zM          通过设置折叠级别为 0 来关闭所有的折叠。
<C-N>         转到下一个顶层 tag。
<C-P>         转到前一个顶层 tag。
s             在 tag 名称排序和文件顺序排序中切换。
x             切换 Tagbar 窗口的最大化。
q             关闭 Tagbar 窗口。
@end example

@b{vim easymotion}
@example
" 更改快捷键
map f <Plug>(easymotion-prefix)
map ff <Plug>(easymotion-s)
map fs <Plug>(easymotion-f)
map fl <Plug>(easymotion-lineforward)
map fj <Plug>(easymotion-j)
map fk <Plug>(easymotion-k)
map fh <Plug>(easymotion-linebackward)
" 忽略大小写
let g:EasyMotion_smartcase = 1
...
ff 全屏搜索
fs 往下搜索
fF 往上搜索
fl 行内向右搜索
fj 行间向下搜索
fk 行间向上搜索
fh 行内向左搜索
fw 往下搜索一个单词开始处
fb 往上搜索一个单词开始处
fe 往下搜索一个单词结尾处
fge 往下搜索一个单词结尾处
@end example

@b{ctrlp}
@example
Basic Usage
Run :CtrlP or :CtrlP [starting-directory] to invoke CtrlP in find file mode.
Run :CtrlPBuffer or :CtrlPMRU to invoke CtrlP in find buffer or find MRU file mode.
Run :CtrlPMixed to search in Files, Buffers and MRU files at the same time.
Check :help ctrlp-commands and :help ctrlp-extensions for other commands.
...
Once CtrlP is open:
Press <F5> to purge the cache for the current directory to get new files, remove deleted files and apply new ignore options.
Press <c-f> and <c-b> to cycle between modes.
Press <c-d> to switch to filename only search instead of full path.
Press <c-r> to switch to regexp mode.
Use <c-j>, <c-k> or the arrow keys to navigate the result list.
Use <c-t> or <c-v>, <c-x> to open the selected entry in a new tab or in a new split.
Use <c-n>, <c-p> to select the next/previous string in the prompt's history.
Use <c-y> to create a new file and its parent directories.
Use <c-z> to mark/unmark multiple files and <c-o> to open them.

todo ctrlsf plugin
https://github.com/dyng/ctrlsf.vim
@end example

@b{vim plugin}
@example
http://blog.guorongfei.com/2015/10/06/vim-plugin/
http://mirnazim.org/writings/vim-plugins-i-use/
@end example

@node multi-window
@section multi-window

@b{open}
@example
:new file   // split new file
:sp file    // split new file
:vsp file   // vertical split new file
@end example

@b{switch}
@example
:ctrl+w+j/k，通过j/k可以上下切换，或者:ctrl+w加上下左右键，还可以通过快速双击ctrl+w依次切换窗口。

resizing
CTRL-W =        Make all windows (almost) equally high and wide
	
:res[ize] -N
CTRL-W -        Decrease current window height by N (default 1).
	                If used after |:vertical|: decrease width by N.
	
:res[ize] +N
CTRL-W +        Increase current window height by N (default 1).
	                If used after |:vertical|: increase width by N.
	
:res[ize] [N]
CTRL-W CTRL-_
CTRL-W _        Set current window height to N (default: highest possible).
	
z@{nr@}<CR>       Set current window height to @{nr@}.
CTRL-W <        Decrease current window width by N (default 1).
CTRL-W >        Increase current window width by N (default 1).
:vertical res[ize] [N]                  *:vertical-resize* *CTRL-W_bar*
@end example

@b{rename}
@example
:f file
@end example

@b{open more files}
@example
vim a b c
:n      // jump to the next file
:e# 		// return the last edit file
:e file // Edit a file in a new buffer
@end example

@b{file explorer}
@example
:Ex 开启目录浏览器，可以浏览当前目录下的所有文件，并可以选择
:Sex 水平分割当前窗口，并在一个窗口中开启目录浏览器
:ls 显示当前buffer情况
@end example

@b{vim/shell switch}
@example
:shell 可以在不关闭vi的情况下切换到shell命令行
exit 从shell回到vi
@end example

@b{move cursor to other window}
@example
" ctrl+h/j/k/l to jump
:nmap <silent> <C-h> :wincmd h<CR>
:nmap <silent> <C-j> :wincmd j<CR>
:nmap <silent> <C-k> :wincmd k<CR>
:nmap <silent> <C-l> :wincmd l<CR>
@end example

@b{resize window}
@example
" +/- resize window
:map - <C-W>-
:map + <C-W>+
:map < <C-W><
:map > <C-W>>
" http://vim.wikia.com/wiki/Switch_between_Vim_window_splits_easily
@end example

@b{multiple windows}
@example
:e filename      - edit another file
:split filename  - split window and load another file
:vsplit file     - vertical split
ctrl-w up arrow  - move cursor up a window
ctrl-w ctrl-w    - move cursor to another window (cycle)
ctrl-w_          - maximize current window
ctrl-w=          - make all equal size
10 ctrl-w+       - increase window size by 10 lines
:sview file      - same as split, but readonly
:hide            - close current window
:only            - keep only this window open
:ls              - show current buffers
:b 2             - open buffer #2 in this window
:qa              - close all files
@end example

@b{more window commands}
@example
ctrl-w s ->  Split windows
ctrl-w w ->  Switch between windows
ctrl-w q ->  Quit a window
ctrl-w v ->  Split windows vertically
@end example

@b{Resource}
@example
https://www.cs.oberlin.edu/~kuperman/help/vim/windows.html
http://blog.csdn.net/shuangde800/article/details/11430659
http://bbs.chinaunix.net/thread-1836797-1-1.html
http://blog.csdn.net/devil_2009/article/details/7006113
@end example

@node vimgrep
@section vimgrep

@b{example}
@example
vimgrep /pattern/ full_file_name  // 在指定文件中查找
vimgrep /pattern/ %   // 在当前打开文件中查找
:copen  // 打开查找结果
:cclose  // 关闭查找结果
@end example

@b{usage}
@example
vimgrep /匹配模式/[g][j] 要搜索的文件/范围 
g：表示是否把每一行的多个匹配结果都加入
j：表示是否搜索完后定位到第一个匹配位置
vimgrep /pattern/ %           在当前打开文件中查找
vimgrep /pattern/ *             在当前目录下查找所有
vimgrep /pattern/ **            在当前目录及子目录下查找所有
vimgrep /pattern/ *.c          查找当前目录下所有.c文件
vimgrep /pattern/ **/*         只查找子目录

:cn                                          查找下一个
:cp                                          查找上一个
:copen                                    打开quickfix
:cw                                          打开quickfix
:cclose                                   关闭qucikfix
:help vimgrep                       查看vimgrep帮助
@end example

@b{mappings}
@example
// This command based on VimTip483 uses <cword> to get the word under the cursor, but also uses % to limit the search to the current file only:
command Gfile :execute 'vimgrep /'.expand('<cword>').'/gj '.expand('%') | copen

//get the word under the cursor, and searches for it in the current directory and all subdirectories
map <F4> :execute "vimgrep /" . expand("<cword>") . "/j **" <Bar> cw<CR>
http://vim.wikia.com/wiki/Find_in_files_within_Vim
@end example

@b{reference}
@example
http://blog.csdn.net/zqiang_55/article/details/30715961
http://www.refreshinglyblue.com/2009/02/17/recursive-searching-in-vim-with-grep-vimgrep/
@end example

@node vim folding
@section vim folding

@b{quick start}
@example
set fdm=marker
zf%  折叠
zo    打开当前折叠
zc    折叠当前行
@end example

@b{more usage}
@example
set foldmethod=indent "set default foldmethod
"zi 打开关闭折叠
"zv 查看此行
zm 关闭折叠
zM 关闭所有
zr 打开
zR 打开所有
zc 折叠当前行
zo 打开当前折叠
zd 删除折叠
zD 删除所有折叠

1. 折叠方式
可用选项 'foldmethod' 来设定折叠方式：set fdm=*****。
有 6 种方法来选定折叠：
manual           手工定义折叠
indent             更多的缩进表示更高级别的折叠
expr                用表达式来定义折叠
syntax             用语法高亮来定义折叠
diff                  对没有更改的文本进行折叠
marker            对文中的标志折叠
注意，每一种折叠方式不兼容，如不能即用expr又用marker方式，我主要轮流使用indent和marker方式进行折叠。

使用时，用：set fdm=marker 命令来设置成marker折叠方式（fdm是foldmethod的缩写）。
要使每次打开vim时折叠都生效，则在.vimrc文件中添加设置，如添加：set fdm=syntax，就像添加其它的初始化设置一样。

2. 折叠命令
选取了折叠方式后，我们就可以对某些代码实施我们需要的折叠了，由于我使用indent和marker稍微多一些，故以它们的使用为例：
如果使用了indent方式，vim会自动的对大括号的中间部分进行折叠，我们可以直接使用这些现成的折叠成果。
在可折叠处（大括号中间）：
zc      折叠
zC     对所在范围内所有嵌套的折叠点进行折叠
zo      展开折叠
zO     对所在范围内所有嵌套的折叠点展开
[z       到当前打开的折叠的开始处。
]z       到当前打开的折叠的末尾处。
zj       向下移动。到达下一个折叠的开始处。关闭的折叠也被计入。
zk      向上移动到前一折叠的结束处。关闭的折叠也被计入。

当使用marker方式时，需要用标计来标识代码的折叠，系统默认是@{@{@{和@}@}@}，最好不要改动之：）
我们可以使用下面的命令来创建和删除折叠：
zf      创建折叠，比如在marker方式下：
zf56G，创建从当前行起到56行的代码折叠；
10zf或10zf+或zf10↓，创建从当前行起到后10行的代码折叠。
10zf-或zf10↑，创建从当前行起到之前10行的代码折叠。
在括号处zf%，创建从当前行起到对应的匹配的括号上去（（），@{@}，[]，<>等）。
zd      删除 (delete) 在光标下的折叠。仅当 'foldmethod' 设为 "manual" 或 "marker" 时有效。
zD     循环删除 (Delete) 光标下的折叠，即嵌套删除折叠。
仅当 'foldmethod' 设为 "manual" 或 "marker" 时有效。
zE     除去 (Eliminate) 窗口里“所有”的折叠。
仅当 'foldmethod' 设为 "manual" 或 "marker" 时有效。

关于vim的代码折叠，小弟也是初学，仅做参考。




使用Vim的折叠功能书写程序代码

折行的用处：
2 创建折行进行大纲预览
2 移动到某处进行编辑
2 使用jzij打开文本进行编辑
2 编辑完毕后再用jzij打开折行进行移动

打开vim的折叠功能，请在~/.vimrc 中加入:set foldmethod=marker ，使用vim默认的折叠标签进行处理。使用方法如下：
1、加折叠标签
在normal模式下，从键盘输入zf并回车，您就会看到折叠在一起的两行标签如下：
/*@{@{@{*/
.....这里输入您 的程序代码
/*@}@}@}*/

2、输入程序代码后，将代码折叠起来使用如下命令(normal模式)：
zc 回车

3、打开折叠的程序有以下几种方法
a、在折叠的行上移动光标
b、在normal模式下输入zo并回车

4、给一段文字加折行（normal 模式）
zfap
5、zr命令可以打开折叠几层的内容 zm使用内容折叠的更多一些（多层折叠操作时可反复使用）。
6、嵌套了多层的折行, 也可以用zR命令一次打开所有折行
7、关闭所有的嵌套折行使用zM
8、可以用jznj命令来禁用一个折行. 然后用jzNj还可以恢复它. jzij命令则可以在两者之间切换.
@end example

@b{resource}
@example
参考vim的使用手册。
http://vim.wikia.com/wiki/Folding
@end example

@node vimdiff
@section vimdiff

@b{vimdiff usage}
@example
]c :        - next difference
[c :        - previous difference
do          - diff obtain
dp          - diff put
zo          - open folded text
zc          - close folded text
:diffupdate - re-scan the files for differences
@end example

@b{resource}
@example
http://vim.wikia.com/wiki/A_better_Vimdiff_Git_mergetool  // a better vimdiff git mergetool
http://www.rosipov.com/blog/use-vimdiff-as-git-mergetool/ // use vimdiff as git mergetool
@end example

@node often used command for vim
@section often used command for vim

@node LaTex
@chapter LaTex

@menu
* learning materials for LaTex::
* often used command for LaTex::
@c * copying:: free time team
@end menu

@node learning materials for LaTex
@section learning materials for LaTex

@node often used command for LaTex
@section often used command for LaTex

@node texinfo
@chapter texinfo

@menu
* learning materials for texinfo::
* often used command for texinfo::
@c * Copying:: free time team
@end menu

@node learning materials for texinfo
@section learning materials for texinfo
@itemize @bullet
@item
@b{Reference} @url{http://www.gnu.org/software/texinfo/manual/texinfo/texinfo.html, texinfo document}
@end itemize

@node often used command for texinfo
@section often used command for texinfo

@itemize @bullet
@item
@b{comment}
@end itemize

@example
@@c this is comment
@end example

@itemize @bullet
@item
@b{box}
@end itemize

@example
@@cartouche
@@example
text @@c box example
@@end example
@@end cartouche
@end example

@itemize @bullet
@item
@b{bold}
@end itemize

@example
@@b@{text@}
@end example

@itemize @bullet
@item
@b{url}
@end itemize

@example
@@url@{url link, text@}
@end example

@itemize @bullet
@item
@b{item}
@end itemize

@example
@@itemize @@bullet
@@item
item test
@@end itemize
@end example

@node markdown
@chapter markdown

@menu
* learning materials for markdown::
* often used command for markdown::
@end menu

@node learning materials for markdown
@section learning materials for markdown

@node often used command for markdown
@section often used command for markdown

@bye
